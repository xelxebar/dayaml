P←{IN←⍵
 I←{(⊂⍵)⌷⍺} ⋄ U←{⍺←⊢ ⋄ ⍺ ⍵⍵⍣¯1⍤⍺⍺⍥⍵⍵ ⍵} ⋄ V←{⍺←⊢ ⋄ ⍺ ⍵⍵⍤⍺⍺⍥⍵⍵⍣¯1⊢⍵}
 assert←{⍺←'assertion failure' ⋄ 0∊⍵:⍎'⍺ ⎕SIGNAL 8' ⋄ shy←0}
 X←16∘⊥∘((⎕D,'ABCDEF')∘⍳)¨

 1<≢⍴IN:'PARSER EXPECTS VECTOR INPUT'⎕SIGNAL 11
 1<|≡IN:'PARSER EXPECTS SIMPLE VECTOR INPUT'⎕SIGNAL 11
 0≠10|⎕DR IN:'PARSER EXPECTS CHARACTER VECTOR'⎕SIGNAL 11

 CR LF←⎕UCS 13 10
 IN←LF,⍨LF@(=∘CR)IN/⍨ ~CR LF⍷IN

 linestarts←0,(⍸¯1=+⍀⍣¯1⊢IN∊LF),≢IN
 SIGNAL←{⍺←11 'PARSER ERROR' ⋄ EN EM∘←⍺ ⋄ lines←∪linestarts⍸⍵
  nos⍀⍨←1 0⍴⍨2×≢nos←'[',(⍕⍪lines),⍤1⊢'] '
  msg←⍪~∘LF¨IN∘I¨idx←beg+⍳¨linestarts[lines+1]-beg←linestarts[lines]
  msg←¯1↓∊LF,⍨nos,⍪,msg,' ‾'∘I¨∊∘⍵¨idx
  dmx←('EN' EN)('Category' 'Parser')('Vendor' 'dayaml')('Message'(EM,LF,msg))
  ⎕SIGNAL⊂dmx}

 c_printable←X¨('20' '7E') ('A0' 'D7FF') ('E000' 'FFFD') ('010000' '10FFFF')
 c_printable←⎕UCS∊(X'09' '0A' '0D' '85'),{⍺+⍳1+⍵-⍺}/¨c_printable
 ∨/m←~IN∊c_printable:11 ('INVALID CHARACTER AT POSITION(S) ',⍕n)SIGNAL⊢n←⍸m

 INN↓¨⍨←d←⍳∘1¨' '≠INN←(LF∘≠⊆⊢)IN
 _←(1↓k){p[⍺]←⍵[⍵⍸⍺]}¨I∘⍋⍨¨,⍀¯1↓k←(⍋∪d)I⍨⊢∘⊂⌸d⊣p←⍳≢d
 ⍉(⍳≢d),d,⍪p

 dirends docends←⍸¨((3⌽IN∊' 'LF)∧¯1⌽IN∊LF)∘∧¨('---'⍷IN)('...'⍷IN)

 IN}

⍝ PHASES
⍝ Directives & Documents
⍝ Block-style nodes
⍝ %-escape error-detection (not-expansion)
⍝ Plain scalars
⍝ Flow-style nodes
⍝ Block scalar nodes
⍝ Single-quote flow scalars
⍝ Double-quote flow scalars
⍝ Backslash-escape characters
⍝ Block-style scalars

⍝ NOTES
⍝ Adam's dyadic extension of ⌸

⍝ CHARACTER CLASSES
⍝ nb_json          ←⎕UCS∊(X⊂'09'),{⍺+⍳1+⍵-⍺}/∘X'20' '10FFFF'
⍝ c_indicator      ←'-?:,[]{}#&*!|>''"%@`'
⍝ c_flow_indicator ←',[]{}'
⍝ b_char           ←⎕UCS X'0A' '0D'
⍝ nb_char          ←c_printable ~ b_char,⎕UCS X⊂'FEFF'
⍝ s_white          ←⎕UCS X'20' '09'
⍝ ns_char          ←nb_char~s_white
⍝ ns_hex_digit     ←⎕D,'ABCDEF','abcdef'
⍝ ns_ascii_letter  ←⎕A,⎕UCS 32+⎕UCS⎕A
⍝ ns_word_char     ←⎕D,ns_ascii_letter,'-'
⍝ ns_uri_char      ←'%',ns_word_char,'#;/?:@&=+$,_.!~*''()[]'
⍝ ns_tag_char      ←ns_uri_char~'!',c_flow_indicator
