P←{IN←⍵
 I←{(⊂⍵)⌷⍺} ⋄ U←{⍺←⊢ ⋄ ⍺ ⍵⍵⍣¯1⍤⍺⍺⍥⍵⍵ ⍵}
 assert←{⍺←'assertion failure' ⋄ 0∊⍵:⍎'⍺ ⎕SIGNAL 8' ⋄ shy←0}
 X←16∘⊥∘((⎕D,'ABCDEF')∘⍳)¨

 1<≢⍴IN:'PARSER EXPECTS VECTOR INPUT'⎕SIGNAL 11
 1<|≡IN:'PARSER EXPECTS SIMPLE VECTOR INPUT'⎕SIGNAL 11
 0≠10|⎕DR IN:'PARSER EXPECTS CHARACTER VECTOR'⎕SIGNAL 11

 CR LF←⎕UCS 13 10
 IN,←LF ⋄ IN←LF@(=∘CR)IN/⍨ ~CR LF⍷IN
 linestarts←0,(⍸¯1=+⍀⍣¯1⊢IN∊LF),≢IN
 SIGNAL←{⍺←11 'PARSER ERROR' ⋄ EN EM∘←⍺ ⋄ lines←∪linestarts⍸⍵
  nos⍀⍨←1 0⍴⍨2×≢nos←'[',(⍕⍪lines),⍤1⊢'] '
  msg←⍪~∘LF¨IN∘I¨idx←beg+⍳¨linestarts[lines+1]-beg←linestarts[lines]
  msg←¯1↓∊LF,⍨nos,⍪,msg,' ‾'∘I¨∊∘⍵¨idx
  dmx←('EN' EN)('Category' 'Parser')('Vendor' 'dayaml')('Message'(EM,LF,msg))
  ⎕SIGNAL⊂dmx}

 c_printable←⎕UCS∊(X'09' '0A' '0D' '85'),{⍺+⍳1+⍵-⍺}/∘X¨('20' '7E') ('A0' 'D7FF') ('E000' 'FFFD') ('010000' '10FFFF')
 ∨/m←~IN∊c_printable:11 ('INVALID CHARACTER AT POSITION(S) ',⍕n)SIGNAL⊢n←⍸m

 nb_json          ←⎕UCS∊(X⊂'09'),{⍺+⍳1+⍵-⍺}/∘X'20' '10FFFF'
 c_indicator      ←'-?:,[]{}#&*!|>''"%@`'
 c_flow_indicator ←',[]{}'
 b_char           ←⎕UCS X'0A' '0D'
 nb_char          ←c_printable ~ b_char,⎕UCS X⊂'FEFF'
 s_white          ←⎕UCS X'20' '09'
 ns_char          ←nb_char~s_white
 ns_hex_digit     ←⎕D,'ABCDEF','abcdef'
 ns_ascii_letter  ←⎕A,⎕UCS 32+⎕UCS⎕A
 ns_word_char     ←⎕D,ns_ascii_letter,'-'
 ns_uri_char      ←'%',ns_word_char,'#;/?:@&=+$,_.!~*''()[]'
 ns_tag_char      ←ns_uri_char~'!',c_flow_indicator

 ⍝ PHASES
 ⍝ %-escape error-detection (not-expansion)
 ⍝ Flow-style nodes
 ⍝ Block scalar nodes
 ⍝ Single-quote flow scalars
 ⍝ Double-quote flow scalars
 ⍝ Backslash-escape characters
 ⍝ Block-style scalars

 IN

 ⍝ NOTES
 ⍝ Syntax def of FLOW-*, and BLOCK-* contexts?
 ⍝ Oulipo: Avoid dfns nesting; Var names prioritize macrosopic readability.
 ⍝ Link still buggy

 ⍝ QUESTIONS
 ⍝ X∘←Y just shorthand for ⎕this.X←Y? Why does Scholes regret this?
 ⍝ Performance monitoring?
}
