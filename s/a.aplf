P←{IN←⍵
 I←{(⊂⍵)⌷⍺} ⋄ U←{0=⎕NC'⍺':⍵⍵⍣¯1⍤(⍺⍺⍥⍵⍵) ⍵ ⋄ ⍺ (⍵⍵⍣¯1⍤(⍺⍺⍥⍵⍵)) ⍵}
 assert←{⍺←'assertion failure' ⋄ 0∊⍵:⍺ ⎕SIGNAL 8 ⋄ shy←0}
 X←16∘⊥∘('0123456789ABCDEF'∘⍳)¨

 1<≢⍴IN:'PARSER EXPECTS VECTOR INPUT'⎕SIGNAL 11
 1<|≡IN:'PARSER EXPECTS SIMPLE VECTOR INPUT'⎕SIGNAL 11
 0≠10|⎕DR IN:'PARSER EXPECTS CHARACTER VECTOR'⎕SIGNAL 11

 CR LF            ←⎕UCS 13 10
 c_printable      ←⎕UCS∊(X'09' '0A' '0D' '85'),{⍺+⍳1+⍵-⍺}/∘X¨('20' '7E') ('A0' 'D7FF') ('E000' 'FFFD') ('010000' '10FFFF')
 nb_json          ←⎕UCS∊(X⊂'09'),{⍺+⍳1+⍵-⍺}/∘X('20' '10FFFF')
 c_indicator      ←'-?:,[]{}#&*!|>''"%@`'
 c_flow_indicator ←',[]{}'
 b_char           ←⎕UCS X'0A' '0D'
 nb_char          ←c_printable ~ b_char,⎕UCS X'FEFF'
 s_white          ←⎕UCS X'20' '09'
 ns_char          ←nb_char~s_white
 ns_dec_digit     ←'0123456789'
 ns_hex_digit     ←ns_dec_digit,'ABCDEF','abcdef'
 ns_ascii_letter  ←'ABCDEFGHIJKLMNOPQRSTUVWXYabcdefghijklmnopqrstuvwxy'
 ns_word_char     ←ns_dec_digit,ns_ascii_letter,'-'
 ns_uri_char      ←'%',ns_word_char,'#;/?:@&=+$,_.!~*''()[]'
 ns_tag_char      ←ns_uri_char~'!',c_flow_indicator

 ~∧/m←IN∊c_printable:11⎕SIGNAL⍨'INVALID CHARACTER AT POSITION(S) ',⍕⍸m
 IN,←LF ⋄ IN←LF@(=∘CR)IN/⍨ ~CR LF⍷IN

 ⍝ PHASES
 ⍝ %-escape error-detection (not-expansion)
 ⍝ Flow-style nodes
 ⍝ Block scalar nodes
 ⍝ Single-quote flow scalars
 ⍝ Double-quote flow scalars
 ⍝ Backslash-escape characters
 ⍝ Block-style scalars

 IN

 ⍝ NOTES
 ⍝ Syntax def of FLOW-*, and BLOCK-* contexts?

 ⍝ QUESTION
 ⍝ Why does U←{⍵⍵⍣¯1⍤(⍺⍺⍥⍵⍵)} throw a syntax error?
 ⍝ Why do we need parens around train in dyadic U?
 ⍝ Why does co-dfns assert wrap (⍺ ⎕SIGNAL 8) in a ⍎ call?
}
