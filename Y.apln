:Namespace Y
⎕IO←0  ⍝ ⎕IO delenda est
I←{(⊂⍵)⌷⍺} ⋄ U←{⍺←⊢ ⋄ 1≡⍺ 1:⍵⍵⍣¯1 ⍺⍺ ⍵⍵ ⍵ ⋄ ⍵⍵⍣¯1 ⍺ ⍺⍺⍥⍵⍵ ⍵}

HT LF CR←⎕UCS 9 10 13
WS←' ' HT
_ M S K QL←⍳5
∆K←' MSKQ'
TM TS TK←1+⍳3

PS←{
 1<≢⍴⍵: 'PARSER EXPECTS VECTOR INPUT'            ⎕SIGNAL 11
 2<|≡⍵: 'PARSER EXPECTS DEPTH OF CHARS OR LINES' ⎕SIGNAL 11
 ∨/0≠10|⎕DR¨⊆⍵: 'PARSER EXPECTS CHAR INPUT'      ⎕SIGNAL 11

 c←¯1↓¨(¯1⌽LF=z)⊂z←∊LF,⍨⍪⊆⍵

 c←{1↓x⌿⍨~∨⍀' #'⍷x←' ',⍵}¨c

 d←+⌿¨∧⍀¨' '=c

 c←{⍵⌿⍨~∧⍀⍵=' '}¨c

 k←(≢c)⍴0

 k[⍸∨⌿¨('-'=c)∧(1↓⍪∘1)¨' '=c]←S ⋄ c←2↓¨@{k=S}c

 k[⍸(k=0)∧(⊃¨c)∊'"''']←QL

 k[i←⍸(k=0)∧∨⌿¨msk←(':'=c)∧(1↓⍪∘1)¨' '=c]←M ⋄ q←(≢c)⍴⊂''
 q c(⊣@i⍨)←2↑↓⍉↑msk[i]{(⍺⍱¯1⌽⍺)⊆⍵}¨c[i]

 k[⍸(k=0)∧∨⌿¨c≠' ']←K

⍝ Identify globbable types

 d k q c⌿⍨←⊂k≠0

 d k q c⍪⍨←(d+←S M∊⍨⊃k)↑¨d k⍪⊂¨'' ''

 c←(1↓¯1↓⊢)¨@{k=QL}{⍵⌿⍨~∧⍀U⌽⍵=' '}¨c

 k[⍸(k=QL)∨(d≥1⌽d)∧k∊S M]←K

 q⍳⍨←qq←∪(⊂''),q

 a←(≢c)⍴0
 t←(≢c)⍴TK
 tt←'tag:yaml.org,2002:'∘,¨'map' 'seq' 'str'
 ver←1 2
 hnd←(,'!')'!!'
 pfx←(,'!')'tag:yaml.org,2002:'

 (d k t a q c)(tt qq ver hnd pfx)}

∇{z}←TEST;TAP;ERRS;d;k;t;a;q;c;tt;qq;ver;hnd;pfx
 z←0  ⍝ Profiling with cmpx requires result
 TAP←{⍺←⊢ ⋄ 0∊⍵: ⍺ ⎕SIGNAL 8 ⋄ ⎕←'ok - ',4↓(⎕CR'#.Y.TEST')[1⊃⎕LC;] ⋄ _←0}
 ERRS←{⍺←⊢ ⋄ 0::⎕EN ⋄ 0⊣⍺ ⍺⍺ ⍵}

⎕←'# Empty input'
 (d k t a q c)(tt qq ver hnd pfx)←PS ''
 TAP 0=≢¨d k t a q c
 TAP 1=≢∘⍴¨d k t a q c
 TAP 0=⊃¨d k t a q
 TAP c≡0⍴⊂''
 TAP tt≡'tag:yaml.org,2002:'∘,¨'map' 'seq' 'str'
 TAP qq≡,⊂''
 TAP ver≡1 2
 TAP hnd≡(,'!')'!!'
 TAP pfx≡(,'!')'tag:yaml.org,2002:'

⎕←'# Invalid input'
 TAP 11=PS ERRS ↑'fire' 'flies' 'at' 'dusk'
 TAP 11=PS ERRS ⍳5
 TAP 11=PS ERRS 'dally' 10 'monday'

⎕←'# Plain scalar singleton'
 (d k t _ _ c)_←PS 'beware the drool'
 TAP d=0
 TAP k=K
 TAP t=TK
 TAP c≡,⊂'beware the drool'

⎕←'# One-line comment singleton'
 (d _ _ _ _ _)_←PS '# asparagus goodies'
 TAP d≡⍬

⎕←'# Plain scalar with whitespace padding'
 (_ _ _ _ _ c)_←PS '   drosophilia melancholia     '
 TAP c≡,⊂'drosophilia melancholia'

⎕←'# Inline comment'
 (_ _ _ _ _ c)_←PS'monkey business # for profit'
 TAP c≡,⊂'monkey business'

⎕←'# Single-quoted string'
 (_ k t _ _ c)_←PS '''fiona barrusta'''
 TAP k=K
 TAP t=TK
 TAP c≡,⊂'fiona barrusta'

⎕←'# Single-quoted empty scalar'
 (_ k t _ _ c)_←PS ''''''
 TAP k=K
 TAP t=TK
 TAP c=,⊂''

⎕←'# Double-quoted scalar'
 (_ k t _ _ c)_←PS '"dreamers in droves"'
 TAP k=K
 TAP t=TK
 TAP c≡,⊂'dreamers in droves'

⎕←'# Double-quoted empty scalar'
 (_ k t _ _ c)_←PS '""'
 TAP k=K
 TAP t=TK
 TAP c≡,⊂''

⎕←'# Sequence wrapping'
 (_ k _ _ _ c)_←PS '- APL' '- ???' '- PROFIT'
 TAP 4=≢k
 TAP k≡S K K K
 TAP c≡'' 'APL' '???' 'PROFIT'

⎕←'# Empty lines'
 (d _ _ _ _ _)_←PS '- APL' '' '- ???' '' '- PROFIT'
 TAP 4=≢d

⎕←'# Comment lines'
 (d _ _ _ _ _)_←PS 'meyers-briggs:' '  # types' '  - intj' '  - infp'
 TAP 4=≢d

⎕←'# Padded double quoted literal'
 (_ _ _ _ _ c)_←PS '   "this is a test"    '
 TAP c≡,⊂'this is a test'

⎕←'# Simple maps'
 (_ k _ _ q c)(_ qq _ _ _)←PS 'abc: 123' 'norse: gods' 'emily: bronte'
 TAP 4=≢k
 TAP c≡'' '123' 'gods' 'bronte'
 TAP q≡0 1 2 3
 TAP qq≡'' 'abc' 'norse' 'emily'

⎕←'# Simple maps with empty lines'
 (_ _ _ _ _ c)_←PS 'abc: 123' '' 'norse: gods' '' '      ' 'emily: bronte' ' ' ''
 TAP c≡'' '123' 'gods' 'bronte'

⎕←'# Sequence of sequences'
 (d k _ _ _ c)_←PS '-' ' - dresser' ' - drawers' '- buzz lightyear'
 TAP k=S S K K K
 TAP c≡'' '' 'dresser' 'drawers' 'buzz lightyear'
 TAP d=0 1 2 2 1
∇

:EndNamespace
