:Namespace UTILS

##.Y←##.##.Y
##.((d k t a q c b e) (tt qq v h x))←##.Y.MTAST

DISPLAY←{⎕IO ⎕ML←0                    ⍝ Boxed display of array.
 ⍺←1 ⋄ chars←⍺⊃'..''''|-' '┌┐└┘│─'    ⍝ ⍺: 0-clunky, 1-smooth.

 tl tr bl br vt hz←chars              ⍝ Top left, top right, ...

 box←{                                ⍝ Box with type and axes.
  vrt hrz←(¯1+⍴⍵)⍴¨vt hz              ⍝ Vert. and horiz. lines.
  top←(hz,'⊖→')[¯1↑⍺],hrz             ⍝ Upper border with axis.
  bot←(⊃⍺),hrz                        ⍝ Lower border with type.
  rgt←tr,vt,vrt,br                    ⍝ Right side with corners.
  lax←(vt,'⌽↓')[¯1↓1↓⍺],¨⊂vrt         ⍝ Left side(s) with axes,
  lft←⍉tl,(↑lax),bl                   ⍝ ... and corners.
  lft,(top⍪⍵⍪bot),rgt                 ⍝ Fully boxed array.
 }

 deco←{⍺←type open ⍵ ⋄ ⍺,axes ⍵}      ⍝ Type and axes vector.
 axes←{(-2⌈⍴⍴⍵)↑1+×⍴⍵}                ⍝ Array axis types.
 open←{(1⌈⍴⍵)⍴⍵}                      ⍝ Expose null axes.
 trim←{(~1 1⍷∧⌿⍵=' ')/⍵}              ⍝ Remove extra blank cols.
 type←{{(1=⍴⍵)⊃'+'⍵}∪,char¨⍵}         ⍝ Simple array type decorator.
 char←{⍬≡⍴⍵:hz ⋄ (⊃⍵∊'¯',⎕D)⊃'#~'}∘⍕  ⍝ Simple scalar type decorator.

 {                                    ⍝ Recursively box arrays:
  0=≡⍵:' '⍪(⎕FMT ⍵)⍪(⊃⍵ ⍵∊⎕AV)⊃' -'   ⍝ Simple scalar.
  1 ⍬≡(≡⍵)(⍴⍵):'∇' 0 0 box ⎕FMT ⍵     ⍝ Object rep: ⎕OR.
  1=≡⍵:(deco ⍵)box ⎕FMT open ⍵        ⍝ Simple array.
  ('∊'deco ⍵)box trim ⎕FMT ∇¨open ⍵   ⍝ Nested array.
 }⍵}
##.DISPLAY←DISPLAY

CHK∆MATCH←{⍺←Y.MTAST ⋄ exp act←⍺ ⍵
 _←{m←⊂'Unexpected ',(⍵⊃Y.FLDS),':'
  m,←⊂2 2⍴'Expected:' (DISPLAY ⍵⊃exp) 'Found:' (DISPLAY ⍵⊃act)
  TAP.DIAG∊(⍕⍪m),⎕UCS 13
 }{0∊⍴⍵: _←⍵ ⋄ ⍺⍺¨⍵}⍸↑⍣≡r←exp≢¨¨act ⋄ ∧/∊~r}
##.CHK∆MATCH←CHK∆MATCH

∆TRAP←{∧/0=⎕NC'EM' 'EN': 0⊣TAP.DIAG∘⍕¨⎕DMX.DM
 ~r⊣TAP.DIAG(⍕'Unexpected error:'⎕DMX.(EN EM))/⍨r←(EN≢⎕DMX.EN)∨EM≢⎕DMX.EM}
##.∆TRAP←∆TRAP

∆EXEC←{r←(d k t a q c b e) (tt qq v h x) CHK∆MATCH Y.PS IN
 ∨/0≠⎕NC'EN' 'EM': TAP.DIAG 'Unexpected success'
 r}
##.∆EXEC←∆EXEC

_INIT_TEST←{⎕THIS.((d k t a q c b e) (tt qq v h x))←Y.MTAST
 ⎕THIS.TRAP←∆TRAP ⋄ ⎕THIS.EXEC←∆EXEC
 ⎕THIS.⎕EX'EN' 'EM'}
##._INIT_TEST←_INIT_TEST

_EXEC_TEST←{
 ~∧/×⎕NC'EXEC' 'TRAP': ⍬
 0:: DESC TAP.TEST TRAP⍬
 DESC TAP.TEST EXEC⍬}
##._EXEC_TEST←_EXEC_TEST

WITH←{
 _←_EXEC_TEST⍬ ⋄ ⎕THIS.(DESC IN)←⍺ ⍵ ⋄ _INIT_TEST⍬}
##.WITH←WITH

SUITE_END←{
 _EXEC_TEST⍬}
##.SUITE_END←SUITE_END

:EndNamespace
